{
  "errors": [],
  "paths": {
    "_comment": "<add --verbose for a list of skipped paths>",
    "scanned": [
      "targets/basic/inside.py",
      "targets/basic/metavariable-comparison-bad-content.py",
      "targets/basic/metavariable-comparison-base.py",
      "targets/basic/metavariable-comparison-strip.py",
      "targets/basic/metavariable-comparison.py",
      "targets/basic/metavariable-regex-multi-regex.py",
      "targets/basic/metavariable-regex-multi-rule.py",
      "targets/basic/metavariable-regex.py",
      "targets/basic/nosem.py",
      "targets/basic/regex.py",
      "targets/basic/stupid.py"
    ]
  },
  "results": [
    {
      "check_id": "rules.metavar-test",
      "end": {
        "col": 32,
        "line": 1,
        "offset": 31
      },
      "extra": {
        "fingerprint": "bf97e876b2f20b619c7461cf4574f29c0dca2799f41ac41868c0bcdfa752871bd43b29d395dbd7a70ffe19e142c0a173ae3e347a50b597ac431d0e224322ae6e_0",
        "is_ignored": false,
        "lines": "metavariable_regex_test(\"test\")",
        "message": "Metavariable regex test",
        "metadata": {},
        "metavars": {
          "$X": {
            "abstract_content": "\"test\"",
            "end": {
              "col": 31,
              "line": 1,
              "offset": 30
            },
            "start": {
              "col": 25,
              "line": 1,
              "offset": 24
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/basic/metavariable-regex.py",
      "start": {
        "col": 1,
        "line": 1,
        "offset": 0
      }
    },
    {
      "check_id": "rules.metavar-test",
      "end": {
        "col": 35,
        "line": 2,
        "offset": 66
      },
      "extra": {
        "fingerprint": "3e8ab02295a60f23324b485ee52922ae334e305cd8e701c748848d2ec3ea592d3a474c299c4abb2d097bf67a6a0fe7b0db8a54f2a4a274c65c9bb10b61c18363_0",
        "is_ignored": false,
        "lines": "metavariable_regex_test(\"example\")",
        "message": "Metavariable regex test",
        "metadata": {},
        "metavars": {
          "$X": {
            "abstract_content": "\"example\"",
            "end": {
              "col": 34,
              "line": 2,
              "offset": 65
            },
            "start": {
              "col": 25,
              "line": 2,
              "offset": 56
            },
            "unique_id": {
              "md5sum": "<masked in tests>",
              "type": "AST"
            }
          }
        },
        "severity": "ERROR"
      },
      "path": "targets/basic/metavariable-regex.py",
      "start": {
        "col": 1,
        "line": 2,
        "offset": 32
      }
    }
  ],
  "version": "0.42"
}